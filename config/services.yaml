# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    app.notifications.email_sender: admin@localhost
    api_media_base_url: '%env(API_MEDIA_BASE_URL)%'
    akeneo_client_secret: '%env(resolve:AKENEO_CLIENT_SECRET)%'
    mailjet_api_key: '%env(MAILJET_API_KEY)%'
    mailjet_secret_key: '%env(MAILJET_SECRET_KEY)%'
    mailjet_sender_email: '%env(MAILJET_SENDER_EMAIL)%'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $environment: '%kernel.environment%'
            $locale: '%locale%'
            $databaseHealthHistoryDays: '%env(int:DATABASE_HEALTH_HISTORY_DAYS)%'
            $databaseLogLoginHistoryDays: '%env(int:DATABASE_LOG_LOGIN_HISTORY_DAYS)%'
            $databaseLogRequestHistoryDays: '%env(int:DATABASE_LOG_REQUEST_HISTORY_DAYS)%'
            $messengerMessagesHistoryDays: '%env(int:MESSENGER_MESSAGES_HISTORY_DAYS)%'
            $elasticNumberOfShards: '%env(int:ELASTICSEARCH_NUMBER_OF_SHARDS)%'
            $elasticNumberOfReplicas: '%env(int:ELASTICSEARCH_NUMBER_OF_REPLICAS)%'
            $lockUserOnLoginFailureAttempts: '%env(int:LOCK_USER_ON_LOGIN_FAILURE_ATTEMPTS)%'
    _instanceof:
        App\General\Application\Rest\Interfaces\RestResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\RestSmallResourceInterface:
            tags: [ 'app.rest.resource', 'app.stopwatch' ]
        App\General\Application\Rest\Interfaces\BaseRestResourceInterface:
            calls:
                - setValidator: ['@validator']
        AutoMapperPlus\MapperInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\EventDispatcher\EventSubscriberInterface:
            tags: [ 'app.stopwatch' ]
        Symfony\Component\HttpKernel\Controller\ValueResolverInterface:
            tags: [ 'app.stopwatch' ]
        App\General\Application\Utils\Interfaces\MailSenderInterface:
            calls:
                - setMailerService: [ '@App\General\Domain\Service\Interfaces\MailerServiceInterface', '%env(resolve:APP_SENDER_EMAIL)%', '%env(resolve:APP_ERROR_RECEIVER_EMAIL)%', '%env(int:APP_EMAIL_NOTIFICATION_ABOUT_ERROR)%']
                - setTwig: ['@twig']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/*/Infrastructure/DataFixtures/'
            - '../src/DependencyInjection/'
            - '../src/*/Domain/Entity/'
            - '../src/*/Transport/EventListener/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\General\Transport\ValueResolver\EntityValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 150 }

    App\General\Infrastructure\Messenger\Strategy\FailedRetry:
        arguments:
            $isRetryable: '%env(bool:MESSENGER_FAILED_IS_RETRYABLE)%'
            $retryWaitingTime: '%env(int:MESSENGER_FAILED_RETRY_WAITING_TIME)%'

    App\General\Infrastructure\Service\LexikJwtAuthenticatorService:
        arguments:
            $path: '^/api/(?!.*(security)|(test)|(doc)).*$'

    App\General\Domain\Service\Interfaces\ElasticsearchServiceInterface:
        class: App\General\Infrastructure\Service\ElasticsearchService
        arguments:
            $host: '%env(ELASTICSEARCH_HOST)%'
            $username: '%env(ELASTICSEARCH_USERNAME)%'
            $password: '%env(ELASTICSEARCH_PASSWORD)%'
        #lazy: true

    app.serializer.normalizer.object.external_message:
        class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
        autoconfigure: false
        arguments:
            $nameConverter: '@serializer.name_converter.camel_case_to_snake_case'

    app.serializer.denormalizer.array.external_message:
        class: Symfony\Component\Serializer\Normalizer\ArrayDenormalizer
        autoconfigure: false

    app.serializer.normalizer.date_time.external_message:
        class: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
        autoconfigure: false
        arguments:
            - { datetime_format: 'Y-m-d H:i:s' }

    app.serializer.encoder.json.external_message:
        class: Symfony\Component\Serializer\Encoder\JsonEncoder
        autoconfigure: false

    app.serializer.external_message:
        class: Symfony\Component\Serializer\Serializer
        autoconfigure: false
        arguments:
            $normalizers:
                - '@app.serializer.normalizer.date_time.external_message'
                - '@app.serializer.normalizer.object.external_message'
                - '@app.serializer.denormalizer.array.external_message'
            $encoders:
                - '@app.serializer.encoder.json.external_message'
    App\General\Infrastructure\Service\ApiProxyService:
        arguments:
            $apiMediaBaseUrl: '%api_media_base_url%'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Notification\Application\Service\Channel\SmsService:
        arguments:
            $sid: '%env(TWILIO_SID)%'
            $token: '%env(TWILIO_AUTH_TOKEN)%'
            $from: '%env(TWILIO_FROM)%'

    App\Notification\Application\Service\MailjetTemplateService:
        arguments:
            $mailjetApiKey: '%mailjet_api_key%'
            $mailjetSecretKey: '%mailjet_secret_key%'

    App\Notification\Application\Service\MailjetEmailService:
        arguments:
            $mailjetApiKey: '%mailjet_api_key%'
            $mailjetSecretKey: '%mailjet_secret_key%'
            $mailjetSenderEmail: '%mailjet_sender_email%'

    App\Notification\Application\Factory\Notification\:
        resource: '../src/Notification/Application/Factory/Notification'
        autowire: true
        autoconfigure: true
        tags: [ 'app.notification_factory' ]

    App\Notification\Application\Factory\Notification\NotificationFactoryResolver:
        arguments:
            $factories: !tagged_iterator app.notification_factory
when@dev:
    services:
        _defaults:
            autowire: true
            autoconfigure: true

        App\Notification\Infrastructure\DataFixtures\:
            resource: '../src/Notification/Infrastructure/DataFixtures/*'

        App\Tests\TestCase\:
            resource: '../tests/TestCase/*'

        App\Tests\Utils\:
            resource: '../tests/Utils/*'

        ProxyManager\Factory\AccessInterceptorValueHolderFactory:
            class: ProxyManager\Factory\AccessInterceptorValueHolderFactory

        doctrine.dbal.default_connection.stopwatch:
            class: Doctrine\DBAL\Connection
            decorates: doctrine.dbal.default_connection
            factory: [ '@App\General\Application\Decorator\StopwatchDecorator', decorate ]
            arguments: [ '@doctrine.dbal.default_connection.stopwatch.inner' ]

        symfony.component.serializer.stopwatch:
            class: Symfony\Component\Serializer\Serializer
            decorates: serializer
            factory: [ '@App\General\Application\Decorator\StopwatchDecorator', decorate ]
            arguments: [ '@symfony.component.serializer.stopwatch.inner' ]

when@test:
    services:
        _defaults:
            autowire: true
            autoconfigure: true
            public: true

        App\Notification\Infrastructure\DataFixtures\:
            resource: '../src/Notification/Infrastructure/DataFixtures/*'

        App\Tests\TestCase\:
            resource: '../tests/TestCase/*'

        App\Tests\Utils\:
            resource: '../tests/Utils/*'
